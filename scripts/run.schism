#!/usr/bin/env python3
'''
  atuo script to submit SCHISM batch jobs on sciclone/james
  note: environmental variables "schism" is used to load correct modules 
'''
from pylib import *
import time,signal
import subprocess as sbp

#-----------------------------------------------------------------------------
#Input
#hpc: kuro, femto, bora, potomac, james, frontera, levante, stampede2
#ppn:  64,   32,    20,    12,     20,     56,      128,      48
#-----------------------------------------------------------------------------
code='pschism_KURO_ICM_BLD_STANDALONE_TVD-VL.451ceb84 32'
walltime='00:30:00'; nnode=2; ppn=64

#optional:  frontera,levante,stampede2,kuro,etc.
#qnode=None              #specify node name, or default qnode based on HOST will be used
#qname=None              #partition name
#account=None            #account name
#reservation=None        #reservation information
#ihot=1                  #submit hotstart run (0: NO,  1: YES)
#runs=[]                 #used to submit multiple jobs
#scrout='screen.out'     #fname for outout and error

#-----------------------------------------------------------------------------
#submit jobs
#-----------------------------------------------------------------------------
for i in ['qnode','qname','account','reservation']: None if i in locals() else locals().update({i:None})
for i,k in zip(['ihot','runs','scrout'],[0,[],'screen.out']): None if i in locals() else locals().update({i:k})
bdir=os.path.abspath(os.path.curdir); jname=os.path.basename(bdir); qnode=get_qnode(qnode); check_schism_ihot(bdir)
if os.getenv('schism')==None: 
   scode=get_hpc_command(sys.argv[0],bdir,jname,qnode,nnode,ppn,walltime,scrout,0,'schism',qname,account,reservation)
   print(scode); os.system(scode); os._exit(0)

#-----------------------------------------------------------------------------
#running parallel jobs
#-----------------------------------------------------------------------------
if os.getenv('schism')!=None: 
   fmt=1; bdir=os.getenv('schism').split()[0]; os.chdir(bdir)
   scode=get_hpc_command(code,bdir,jname,qnode,nnode,ppn,walltime,scrout,1,'schism')
   def cmb_run():
       p=read('param.nml',3); irec=int(ceil(p.rnday*86400/p.dt/p.ihfskip)); time.sleep(10)
       if not fexist('outputs/out2d_{}.nc'.format(irec)):
          fname=combine_schism_hotstart('outputs')[-1]; hid=max([*[int(i.split('.')[2]) for i in glob('hotstart.nc.*')],0])
          if fexist('hotstart.nc'): os.rename('hotstart.nc','hotstart.nc.{}'.format(hid+1))
          os.symlink('outputs/'+fname,'hotstart.nc'); chparam('param.nml','ihot','2')

   if len(runs)==0: #single jobs 
      if ihot==0:
         print(scode); sys.stdout.flush(); os.system(scode)
      else:
         #current run
         print(scode); sys.stdout.flush(); sjob=sbp.Popen(scode,stdout=sbp.PIPE,shell=True,preexec_fn=os.setsid)
         t0=time.time(); t1=time.time(); n1=0; wt=int(walltime[:2])*3600+int(walltime[3:5])*60+int(walltime[-2:]); dt=600
         while((time.time()-t0)<(wt-dt)):
              time.sleep(60); t2=time.time() #wait
              if (t2-t1)>1800: #check whether run hangs
                 n2=checkrun()[1]
                 if n2!=n1:
                    n1=n2; t1=t2
                 else: #re-submit job on nodes
                    cmb_run(); os.killpg(os.getpgid(sjob.pid),signal.SIGTERM); time.sleep(60)  #kill current run
                    sjob=sbp.Popen(scode,stdout=sbp.PIPE,shell=True,preexec_fn=os.setsid)

         #re-submit batch job
         nday1,nday0,nday=checkrun()[1:4]; os.killpg(os.getpgid(sjob.pid),signal.SIGTERM)  #kill current run
         if nday==0 or nday1<nday: os.environ.pop('schism'); sbp.run('./run.schism')
   else: #multiple jobs: put script outside of run dir
      for m,run in enumerate(runs): 
          print(scode); os.chdir(bdir+'/'+run); os.system(scode)
   sys.exit(0) if qnode in ['bora','levante'] else os._exit(0)
